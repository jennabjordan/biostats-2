#+ message = FALSE, warning = FALSE
library(tidyverse)
read_csv(here::here("data_raw/data_fish_length_anova"))
read_csv(here::here("data_raw/data_fish_length_anova.csv"))
read_csv(here::here("data_raw/data_fish_length_anova.csv"))
#+ message = FALSE, warning = FALSE
library(tidyverse)
read_csv(here::here("data_raw/data_fish_length_anova.csv"))
# pf() estimate the probability of less than q
# Pr(F0 > F) is 1 - Pr(F0 < F)
p_value <- 1 - pf(q = f_value, df1 = n_g - 1, df2 = nrow(df_anova) - n_g)
print(p_value)
#+ message = FALSE, warning = FALSE
library(tidyverse)
df_anova <- read_csv(here::here("data_raw/data_fish_length_anova.csv"))
unique(df_anova$lake)
#+ message = FALSE, warning = FALSE
library(tidyverse)
df_anova <- read_csv(here::here("data_raw/data_fish_length_anova.csv"))
#' ---
#' title: "Set 13"
#' output: html_document
#' date: 2023-11-14
#' author: Jenna Jordan
#' ---
#+ message = FALSE, warning = FALSE
library(tidyverse)
# In-Class ----------------------------------------------------------------
set.seed(1) #keeps random numbers the same
#generate simulated data
##sample size
n <- 100
## parameters
b <- c(0.1, 0.5)
## hypothetical explanatory variable
x1 <- rnorm(n = n, mean = 0, sd = 1)
##design matrix
X <- model.matrix(~x1) #intercept # place holder and explanatory value
## matrix multiplication (%*%)
mu <- drop(X %*% b) #expected value of y & drop() is used to vectorize the matrix
#plot(mu ~ x1)
## create response variable with error
y <- rnorm(n = n, mean = mu, sd = 0.5)
plot(y ~ x1)
abline(0.1, 0.5)
df0 <- tibble(y = y, x1 = x1)
df0%>%
ggplot(aes(y = y,
x = x1)) +
geom_point()
# assess model performace
## R Squared
## true model
m1 <- lm(y ~ x1, data = df0)
summary(m1)
## add useless predictor
df0 <- df0 %>%
mutate(x2 = rnorm(n = n))
m2 <- lm(y ~ x1 + x2, df0) #r-squared value increases as predictors are added (x2, x3, etc.)
summary(m2)
#use
# Likelihood Ratio Test (LR)
logLik(m1)
logLik(m2)
#shows comparison between test m1 and test m2
anova(m1, m2, test = "Chisq") #p-value shows adding useless predictor is not significant
m0 <- lm(y ~ 1, data = df0)
m0
anova(m0, m1, test = "Chisq") #p-value is significant so null model (model 1) is rejected
#AIC (model assessment based on model capacity)
## good results = low AIC
AIC(m1)
AIC(m2) #higher because x2 is useless parameter
# Laboratory --------------------------------------------------------------
library(palmerpenguins)
penguins_raw <- read_csv(here::here("data_raw/penguins_raw.csv"))
penguins_raw <- read_csv(here::here("data_raw/penguins_raw.csv"))
library(palmerpenguins)
penguins_raw <- read_csv(here::here("data_raw/penguins_raw.csv"))
penguins_raw
penguins_raw
#replace white space
colnames(penguins_raw) <- (gsub(" ", "_", colnames(penguins_raw)))
View(penguins_raw)
#remove unit notations
str_remove_all(pattern = "_\\(.{1,}\\)")
#remove unit notations
colnames(penguin_raw) <- str_remove_all(pattern = "_\\(.{1,}\\)")
#remove unit notations
colnames(penguin_raw) <- str_remove_all(pattern = "_\\(.{1,}\\)")
#remove unit notations
colnames(penguins_raw) <- str_remove_all(pattern = "_\\(.{1,}\\)")
#remove unit notations
colnames(penguins_raw) <- str_remove_all(colnames(penguins_raw, pattern = "_\\(.{1,}\\)")
#remove unit notations
penguins_raw <- str_remove_all(string = cnm, pattern = "_\\(.{1,}\\)")
penguins_raw <- str_remove_all(string = cnm, pattern = "_\\(.{1,}\\)")
#remove unit notations
penguins_raw <- str_remove_all(string = colnames(penguins_raw), pattern = "_\\(.{1,}\\)")
df_pen0 <- penguins_raw
#APPROACH 2
cnm <- colnames(penguins_raw) %>%
str_to_lower() %>%
str_replace_all(pattern = "\\s",
replace = "_") %>%
str_remove_all(pattern = "_\\(.{1,}\\)")
colnames(df_pen0) <- cnm
library(palmerpenguins)
df_pen0 <- penguins_raw
View(penguins_raw)
library(palmerpenguins)
View(penguins_raw)
df_pen0 <- penguins_raw
df_pen0
view(df_pen0)
library(palmerpenguins)
library(palmerpenguins)
library(palmerpenguins)
library(palmerpenguins)
penguins_raw
penguins_raw
library(palmerpenguins)
penguins_raw
library(palmerpenguins)
View(penguins_raw)
library(palmerpenguins)
penguins_raw
df_pen0 <- penguins_raw
view(df_pen0)
#+ message = FALSE, warning = FALSE
library(tidyverse)
view(df_pen0)
#APPROACH 2
cnm <- colnames(penguins_raw) %>%
str_to_lower() %>%
str_replace_all(pattern = "\\s",
replace = "_") %>%
str_remove_all(pattern = "_\\(.{1,}\\)")
colnames(df_pen0) <- cnm
#APPROACH 2
cnm <- colnames(penguins_raw) %>%
str_to_lower() %>%
str_replace_all(pattern = "\\s",
replace = "_") %>%
str_remove_all(pattern = "_\\(.{1,}\\)")
cnm
colnames(df_pen0) <- cnm
df_pen0
view(df_pen0)
df_pen <- df_pen0 %>%
mutate(cc_binary = ifelse(clutch_completion == "Yes",
yes = 1,
no = 0),
species = case_when(species == "Adelie Penguin (Pygoscelis adeliae)" ~ "adelie",
species == "Gentoo penguin (Pygoscelis papua)" ~ "gentoo",
species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "chinstrap")
) %>%
drop_na(culmen_length,
culmen_depth,
flipper_length,
body_mass,
sex)
view(df_pen)
m <- glm(cc_binary ~ species +
culmen_length +
culmen_depth +
flipper_length +
body_mass +
sex,
data = df_pen,
family = "binomial") #binomial used because 0 and 1 (upper limit is clear)
summary(m)
m
library(MuMIn)
install.packages(MuMIn)
install.packages("MuMIn")
library(MuMIn)
options(na.action = "na.fail") #makes sure dredge is working
ms <- dredge(m, rank = "AIC")  #creates all models 2^6 (6 predictors)
ms
subset(ms, delta < 2)
get.models(ms, subset = delta < 2)
mgood <- get.models(ms, subset = delta < 2)
mgood
mgood[[1]]
library("statmod")
install.packages(statmod)
install.packages("statmod")
library("statmod")
wells <- read.delim("./data/wells.txt", sep = " ")
wells <- read.delim("./Users/jennajordan/Downloads/data/wells.txt", sep = " ")
wells <- read.delim("Users/jennajordan/Downloads/data/wells.txt", sep = " ")
wells <- read.delim("/Users/jennajordan/Downloads/data/wells.txt", sep = " ")
wells <- read.delim("/Users/jennajordan/Downloads/wells.txt", sep = " ")
head(wells)
his(wells$switch)
hist(wells$switch)
table(wells$switch)
plot(wells, col = "seagreen")
m1 <- glm(switch ~ aresenic, wells, family = binomial(link = logit))
m1 <- glm(switch ~ arsenic, wells, family = binomial(link = logit))
summary(m1)
m1 <- glm(switch ~ arsenic, family = binomial(link = "logit"),
data = wells)
summary(m1)
##Comparison with lm()
m0 <- glm(switch ~ arsenic, data = wells, family = gaussian(link = "identity"))
summary(m0)
par(mfrow = c(2,2))
# plotting residuals versus fitted values to examine violation of linear assumptions
plot(predict(m0, type = 'response'), qresid(m0), col = 'seagreen')
abline(a = 0, b = 0, lty = 2, lwd = 2)
plot(predict(m1, type = 'response'), qresid(m1), col = 'red')
abline(a = 0, b = 0, lty = 2, lwd = 2)
# Q-Q plots to assess specification of wrong error distribution
qqnorm(qresid(m0), col = 'seagreen'); qqline(qresid(m0), lwd = 2)
qqnorm(qresid(m1), col = 'red'); qqline(qresid(m1), lwd = 2)
fake.arsenic <- seq(min(wells$arsenic), max(wells$arsenic), by = 0.1) # New X, spanning from min to max of empirical data
fake.switches <- predict(m1, list(arsenic = fake.arsenic), type = 'link') # Predicted Y
plot(wells$arsenic, wells$switch, xlim = c(0,10))
points(fake.arsenic, fake.switches, col = 'red', type = 'l')
#Visualizing Response Predictions
fake.switches <- predict(m1, list(arsenic = fake.arsenic), type = 'response')
plot(wells$arsenic, wells$switch, xlim = c(0,10))
points(fake.arsenic, fake.switches, col = 'red', type = 'l')
gala <- read.delim("/Users/jennajordan/Downloads/gala.txt", sep = ' ')
head(gala)
plot(gala, col = "seagreen3")
hist(gala$Species, breaks = 15, col = "seagreen3")
m2 <- glm(Species ~ Area * Elevation, data = gala, family = quasipoisson(link = "log"))
summary(m2)
par(mfrow = c(1,2))
# plotting residuals versus fitted values to examine violation of linear assumptions
plot(predict(m2, type = 'response'), qresid(m2), col = 'seagreen', main = "Residuals vs. Fitted")
abline(a = 0, b = 0, lty = 2, lwd = 2)
# Q-Q plot to assess specification of wrong error distribution
qqnorm(qresid(m2), col = 'seagreen'); qqline(qresid(m2), lwd = 2)
head(gala)
m3 <- glm(Species ~ Area * Elevation, Nearest * Adjacent, family = quasipoisson(link = log))
m3 <- glm(Species ~ Area * Elevation, Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
summary(m3)
m3 <- glm(Species ~ Area * Elevation Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
m4 <- glm(Species ~ Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
summary(m3)
summary(m4)
summary(m3)
summary(m4)
m3 <- glm(Species ~ Area * Elevation + Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
summary(m3)
#2:
fake.elevation <- seq(min(gala$Elevation), max(gala$Elevation), by = 1)
length(fake.elevation)
head(gala)
fake.species <- predict(m3, list(Elevation = fake.elevation), type = 'link') #new predicted Y value
fake.species <- predict(m3, list(Elevation = fake.elevation), type = 'link') #new predicted Y value
#3:
fake.elevation <- seq(min(gala$Elevation), max(gala$Elevation), by = 1) #new X value
#3:
fake.elevation <- seq(min(gala$Elevation), max(gala$Elevation), by = 1) #new X value
length(fake.elevation)
fake.species <- predict(m3, list(Elevation = fake.elevation), type = 'link') #new predicted Y value
m3 <- glm(Species ~ Area * Elevation + Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
fake.species <- predict(m3, list(Elevation = fake.elevation), type = 'link') #new predicted Y value
N <- mean(gala$Nearest)
N <- mean(gala$Nearest)
fake.nearest <- rep(N, 1683)
A <- mean(gala$Area)
fake.area <- rep(A, 1683)
AD <- mean(gala$Adjacent)
fake. <- rep(AD, 1683)
fake.species <- predict(m3, list(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area), type = 'link') #new predicted Y value
fake.adjacent <- rep(AD, 1683)
fake.species <- predict(m3, list(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area), type = 'link') #new predicted Y value
fake.species <- predict(m3, list(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent), type = 'link') #new predicted Y value
head(fake.species)
fake.species <- data.frame(predict(m3, list(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent), type = 'link')) #new predicted Y value
head(fake.species)
fake.species <- data.frame(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent), type = 'link')) #new predicted Y value
fake.species <- data.frame(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent), type = 'link') #new predicted Y value
fake.species <- data.frame(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent, type = 'link') #new predicted Y value
head(fake.species)
df <- data.frame(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent, type = 'link') #new predicted Y value
head(df)
predict(m3, list(Elevation = df$fake.elevation, Nearest = df$fake.nearest, Area = df$fake.area, Adjacent = df$fake.adjacent), type = 'link')
df <- data.frame(Elevation = fake.elevation, Nearest = fake.nearest, Area = fake.area, Adjacent = fake.adjacent) #new predicted Y value
head(df)
predict(m3, list(Elevation = df$Elevation, Nearest = df$Nearest, Area = df$Area, Adjacent = df$Adjacent), type = 'link')
fake.species <- predict(m3, list(Elevation = df$Elevation, Nearest = df$Nearest, Area = df$Area, Adjacent = df$Adjacent), type = 'link')
head(fake.species)
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3")
plot(gala$Elevation, gala$Species, xlim = c(0,10)
plot(gala$Elevation, gala$Species, xlim = c(0,10))
plot(gala$Elevation, gala$Species, xlim = c(0,10))
points(fake.elevation, fake.species, col = "pink3")
points(fake.elevation, fake.species, col = "pink3", type = 'l')
plot(gala$Elevation, gala$Species, xlim = c(0,10))
points(fake.elevation, fake.species, col = "pink3", type = 'l')
par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species, xlim = c(0,10))
points(fake.elevation, fake.species, col = "pink3", type = 'l')
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
par(mfrow = 1,1)
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species, 0,1700)
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species, xlim = c(0,1700))
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Species, gala$Elevation, xlim = c(0,1700))
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
fake.species <- predict(m3, list(Elevation = df$Elevation, Nearest = df$Nearest, Area = df$Area, Adjacent = df$Adjacent), type = 'response')
head(fake.species)
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species)
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species, main = "Bivariate Relationship (Species v. Elevation")
#par(mfrow = c(2,2))
plot(gala$Elevation, gala$Species, main = "Bivariate Relationship (Species v. Elevation", xlab = "Elevation", ylab = "Species")
points(fake.elevation, fake.species, col = "pink3", type = 'l')
#par(mfrow = c(2,2))
par(mfrow = 1)
#par(mfrow = c(2,2))
par(mfrow = 0)
plot(gala$Elevation, gala$Species, main = "Bivariate Relationship (Species v. Elevation", xlab = "Elevation", ylab = "Species")
plot(gala$Elevation, gala$Species, main = "Bivariate Relationship (Species v. Elevation", xlab = "Elevation", ylab = "Species")
points(fake.elevation, fake.species, col = "pink3", type = 'l')
plot(gala$Elevation, gala$Species, main = "Bivariate Relationship (Species v. Elevation)", xlab = "Elevation", ylab = "Species")
points(fake.elevation, fake.species, col = "pink3", type = 'l')
# plotting residuals versus fitted values to examine violation of linear assumptions
plot(predict(m3, type = 'response'), qresid(m3), col = 'pink3', main = "Residuals vs. Fitted")
abline(a = 0, b = 0, lty = 2, lwd = 2)
# Q-Q plot to assess specification of wrong error distribution
qqnorm(qresid(m3), col = 'pink3'); qqline(qresid(m3), lwd = 2)
par(mfrow = c(1,2))
# plotting residuals versus fitted values to examine violation of linear assumptions
plot(predict(m3, type = 'response'), qresid(m3), col = 'pink3', main = "Residuals vs. Fitted")
abline(a = 0, b = 0, lty = 2, lwd = 2)
# Q-Q plot to assess specification of wrong error distribution
qqnorm(qresid(m3), col = 'pink3'); qqline(qresid(m3), lwd = 2)
# plotting residuals versus fitted values to examine violation of linear assumptions
plot(predict(m3, type = 'response'), qresid(m3), col = 'pink3', main = "Residuals vs. Fitted", xlab = "Predictor", ylab = "Residuals")
abline(a = 0, b = 0, lty = 2, lwd = 2)
# Q-Q plot to assess specification of wrong error distribution
qqnorm(qresid(m3), col = 'pink3'); qqline(qresid(m3), lwd = 2, xlab = "", ylab = "")
#2:
capture.output(summary(m3), Jordan_table1.txt)
#2:
capture.output(summary(m3), "Jordan_table1.txt")
setwd("/Users/jennajordan/Documents/GitHub/biostats-2/data/Lab-3")
#2:
capture.output(summary(m3), "Jordan_table1.txt")
#2:
capture.output(summary(m3), "Jordan_table1.txt")
m3 <- glm(Species ~ Area * Elevation + Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
summary(m3)
#2:
capture.output(summary(m3), "Jordan_table1.txt")
setwd("/Users/jennajordan/Documents/GitHub/biostats-2/data/Lab-3")
m3 <- glm(Species ~ Area * Elevation + Nearest * Adjacent, data = gala, family = quasipoisson(link = log))
summary(m3)
#2:
capture.output(summary(m3), "Jordan_table1.txt")
#2:
capture.output(summary(m3), file = "Jordan_table1.txt")
